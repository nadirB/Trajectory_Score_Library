BPM 60

@insert "inserts/@iniT.asco.txt"
@insert "inserts/Trajectory_Score_Library_Processes_&_Compiled_Functions.asco.txt"

@init_TSL($RT_TEMPO) ; $RT_TEMPO is an antescofo internal command to retrieve the real time tempo or the declared BPM.
::src_clearAll(4)
;@alg(2, dome)

event 1 Circle_01

;@player($sf1=1, $loop=0, $gain1=0.7, $ch=1)
@player(1,0,0.3,1)

::circle(src=1,iniT=1/2, targeT=-2+1/2, radius=1, offsetX=0, offsetY=0, elev=0.0, azispan=0.0, elespan=0.0, count=1, speed=4) ; 2π := 1 turn anti-clockwise with a radius of 1 during 4 beats

4

@init_TSL($RT_TEMPO)
::src_clearAll(4)
print_antescofo "Trajectory1 Done !"

event 1 multi_circle_01

;@multiplayer($sf2, $gain2)
@multiplayer(4, 0.7)

::circle(src=2, iniT=0,  targeT=2,  radius=0.3,  offsetX=0, offsetY=0, elev=0.0, azispan=0.0, elespan=0.0, count=1, speed=4) ; 2π := 1 turn anti-clockwise with a radius of 0.3 during 4 beats
::circle(src=3, iniT=0, targeT=-1,  radius=0.5,  offsetX=0, offsetY=0, elev=0.0, azispan=0.0, elespan=0.0, count=1, speed=4) ; -2π * $count(2) := 2 turn clockwise with a radius of 0.5 during 4 beats
::circle(src=4, iniT=0,  targeT=2,  radius=0.7,  offsetX=0, offsetY=0, elev=0.0, azispan=0.0, elespan=0.0, count=1, speed=4) ; 2π := 1 turn anti-clockwise with a radius of 0.7 during 4 beats

4

@init_TSL($RT_TEMPO)
::src_clearAll(4)

print_antescofo "Trajectory Done !"

event 1 multi_circle_02

@multiplayer(4, 0.7)

::circle(src=4, iniT=0,   targeT=2  ,   radius=1.3,  offsetX=0,  offsetY=0, elev=0.0, azispan=0.0, elespan=0.0,  count=1, speed=4) ;2π := 1 turn anti-clockwise with a radius of 1.3 during 4 beats
::circle(src=3, iniT=0,   targeT=3/4,   radius=1.5,  offsetX=0,  offsetY=0, elev=0.0, azispan=0.0, elespan=0.0,  count=1, speed=4) ;3π/4 := go to 135° anti-clockwise (azimuth -45) with a radius of 1.5 during 4 beats
::circle(src=2, iniT=0, targeT=-11/8,   radius=1.7,  offsetX=0,  offsetY=0, elev=0.0, azispan=0.0, elespan=0.0,  count=1, speed=4) ;-11/8π := -247.5° clockwise => by yy' symmetry  => 5π/8 := 112.5° anti-clockwise

4

@init_TSL($RT_TEMPO)
::src_clearAll(4)

print_antescofo "Trajectory Done !"

event 1 multi_circle_03

@multiplayer(4, 0.7)

::circle(src=1, iniT=0, targeT=@deg2rad(-180), radius=0.7,  offsetX=0,  offsetY=0,  elev=0.0, azispan=0.0, elespan=0.0, count=1, speed=4) ; idem clockwise

::circle(src=2, iniT=0, targeT=-1, radius=0.5,  offsetX=0,  offsetY=0,  count=1, speed=4) ; idem

::circle(src=3, iniT=0, targeT=@deg2rad(180), radius=0.7,  offsetX=0,  offsetY=0, elev=0.0, azispan=0.0, elespan=0.0,  count=1, speed=4) ; idem anti-clockwise

4

@init_TSL($RT_TEMPO)
::src_clearAll(4)
print_antescofo "Trajectory Done !"

event 1 circles_05

@multiplayer(4, 0.7)

::circle(src=1, iniT=-1, targeT=1, radius=0.5,   offsetX=-1, offsetY=0, elev=0.0, azispan=0.0, elespan=0.0,  count=1, speed=4);  from π/180°/Az90 :  1 turn anti-clockwise during 4 beats, with a radius of 1 and a positive x offset - cf. figure III circle with offsets1
4
::circle(src=2, iniT=1/2, targeT=-1-1/2, radius=0.5,  offsetX=0, offsetY=1, elev=0.0, azispan=0.0, elespan=0.0,  count=1, speed=4)
/*from (π/2)/90°/Az0 : 1 turn clockwise during 4 beats, with a radius of 1 and a positive y offset */
4
::circle(src=3, iniT=0, targeT=2, radius=0.5, offsetX=1, offsetY=0, elev=0.0, azispan=0.0, elespan=0.0, count=1, speed=4)
/* from 0/2π/Az90 1 turn anti-clockwise during 4 beats, with a radius of 1 and a negative x offset */
4
::circle(src=4, iniT=3/2, targeT=-2+3/2, radius=0.5,  offsetX=0, offsetY=-1, elev=0.0, azispan=0.0, elespan=0.0,  count=1, speed=4)
/* from (3π/2)/270°/Az-180 1 turn anti-clockwise during 4 beats, with a radius of 1 and a negative y offset */
4
@init_TSL($RT_TEMPO)
::src_clearAll(4)
print_antescofo "Trajectory Done !"

event 1 circles_06

@multiplayer(4, 0.7)

::circle(src=1, iniT=-1, targeT=1, radius=1, offsetX=-1, offsetY=0, elev=0.0, azispan=0.0, elespan=0.0, count=1, speed=4)

::circle(src=2, iniT=1/2, targeT=-2+1/2, radius=1, offsetX=0, offsetY=1, elev=0.0, azispan=0.0, elespan=0.0, count=1, speed=4)

::circle(src=3, iniT=0,   targeT=2, radius=1, offsetX=1, offsetY=0, elev=0.0, azispan=0.0, elespan=0.0, count=1, speed=4)

::circle(src=4, iniT=3/2, targeT=-2+3/2, radius=1,  offsetX=0,  offsetY=-1, elev=0.0, azispan=0.0, elespan=0.0, count=1, speed=4)

4

@init_TSL($RT_TEMPO)
::src_clearAll(4)
print_antescofo "Trajectory Done !"

event 1 circles_07

@player(1,0,0.7,1)

::circle(src=1, iniT=3/4, targeT=2+3/4, radius=0.5, offsetX=-1, offsetY=1, elev=0.0, azispan=0.0, elespan=0.0, count=1, speed=4) ; from 3π/4/ 135°/ Az -45 :  1 turn anti-clockwise during 4 beats, with a radius of 1 and a negative x offset and a positive y offset

4

@player(2,0,0.7,2)
::circle(src=2, iniT=1/4, targeT=2+1/4, radius=0.5, offsetX=1, offsetY=1, elev=0.0, azispan=0.0, elespan=0.0, count=1, speed=4); from π/4/45°/Az 45 :  1 turn anti-clockwise during 4 beats, with a radius of 1 and a positive x and y offset
4

@player(3,0,0.7,3)
::circle(src=3, iniT=7/4, targeT=2+7/4, radius=0.5, offsetX=0.5, offsetY=-0.5, elev=0.0, azispan=0.0, elespan=0.0, count=1, speed=4) ; from 7π/4/315°/Az 135 :  1 turn anti-clockwise during 4 beats, with a radius of 1 and a positive x offset and a negative y offset

4

@player(4,0,0.7,4)
::circle(src=4, iniT=5/4, targeT=2+5/4, radius=0.5, offsetX=-0.7, offsetY=-0.7, elev=0.0, azispan=0.0, elespan=0.0, count=2, speed=4) ; from 5π/4/225°/Az -135 :  1 turn anti-clockwise during 4 beats, with a radius of 1 and a negative x and y offset

8

@init_TSL($RT_TEMPO)
::src_clearAll(4)
print_antescofo "Trajectory Done !"

event 1 arc_01

@multiplayer(4, 0.3)

::circle(src=1, iniT=0,  targeT=1/4, radius=1, offsetX=0, offsetY=0, elev=0.0, azispan=0.0, elespan=0.0, count=1, speed=4) ;  go to x = π/4 (radian)/from 0° to 45° , azimuth from 90° to 45°  - anti-clockwise - cf. patch_folder/figures_folder/spat_circle_figure_II.pdf

4
::circle(src=2, iniT=0,  targeT=3/4, radius=1, offsetX=0, offsetY=0, elev=0.0, azispan=0.0, elespan=0.0, count=1, speed=4) ; go to  π - x = 3π/4, az = -45 - anti-clockwise

4
::circle(src=3, iniT=0, targeT=5/4, radius=1, offsetX=0, offsetY=0, elev=0.0, azispan=0.0, elespan=0.0, count=1, speed=4) ;  go to π + x = 5π/4, az = -135 - anti-clockwise

4
::circle(src=4, iniT=0, targeT=7/4, radius=1, offsetX=0, offsetY=0, elev=0.0, azispan=0.0, elespan=0.0, count=1, speed=4) ; go to -x = 7π/4, az = 135 - anti-clockwise

4
::circle(src=1, iniT=0,  targeT=-1/4, radius=1, offsetX=0, offsetY=0, elev=0.0, azispan=0.0, elespan=0.0, count=1, speed=4) ; -x = 7π/4 (radian), azimuth := 90° to 135 clockwise

4
::circle(src=2, iniT=0,  targeT=-3/4, radius=1, offsetX=0, offsetY=0, elev=0.0, azispan=0.0, elespan=0.0, count=1, speed=4) ;  π + x = 5π/4,  az := 90° to -135° clockwise

4
::circle(src=3, iniT=0, targeT=-5/4, radius=1, offsetX=0, offsetY=0, elev=0.0, azispan=0.0, elespan=0.0, count=1, speed=4) ;  π - x = 3π/4, az := 90° to -45° clockwise

4
::circle(src=4, iniT=0, targeT=-7/4, radius=1, offsetX=0, offsetY=0, elev=0.0, azispan=0.0, elespan=0.0, count=1, speed=4) ; x = π/4  , az := 90° to 45° clockwise

4

@init_TSL($RT_TEMPO)
::src_clearAll(4)
print_antescofo "Trajectory Done !"

event 1 arcs_02

; ($cmd, $iniT, $targeT, $r, $offsetX, $offsetY, $count, $SPEED)
; check cisoïde in rosace library

@multiplayer(4, 0.3)

::circle(src=3, iniT=1, targeT=5/4, radius=1, offsetX=1, offsetY=1, elev=0.0, azispan=0.0, elespan=0.0, count=1, speed=4)

::circle(src=2, iniT=0, targeT=-1/4, radius=1, offsetX=-1, offsetY=1, elev=0.0, azispan=0.0, elespan=0.0, count=1, speed=4)

::circle(src=1, iniT=0, targeT=1/4, radius=1, offsetX=-1, offsetY=-1, elev=0.0, azispan=0.0, elespan=0.0, count=1, speed=4)

::circle(src=4, iniT=1, targeT=3/4, radius=1, offsetX=1, offsetY=-1, elev=0.0, azispan=0.0, elespan=0.0, count=1, speed=4)

4

::circle(src=3, iniT=5/4, targeT=3/2, radius=1, offsetX=1, offsetY=1, elev=0.0, azispan=0.0, elespan=0.0, count=1, speed=4)

::circle(src=2, iniT=7/4, targeT=3/2, radius=1, offsetX=-1, offsetY=1, elev=0.0, azispan=0.0, elespan=0.0, count=1, speed=4)

::circle(src=1, iniT=1/4, targeT=1/2, radius=1, offsetX=-1, offsetY=-1, elev=0.0, azispan=0.0, elespan=0.0, count=1, speed=4)

::circle(src=4, iniT=3/4, targeT=1/2, radius=1, offsetX=1, offsetY=-1, elev=0.0, azispan=0.0, elespan=0.0, count=1, speed=4)

4

@init_TSL($RT_TEMPO)
::src_clearAll(4)
print_antescofo "Trajectory Done !"

 event 1 arcs_03

; cf. patch_folder/figures_folder/figure III - offset_symmetry_02.pdf / explain position according to figure III

@multiplayer(4, 0.3)

::circle(src=1, iniT=1/4, targeT=3/4, radius=1, offsetX=0, offsetY=-1, elev=0.0, azispan=0.0, elespan=0.0, count=1, speed=4)

::circle(src=2, iniT=1/4, targeT=3/4, radius=1, offsetX=0, offsetY=-0.8, elev=0.0, azispan=0.0, elespan=0.0, count=1, speed=4)

::circle(src=3, iniT=1/4, targeT=3/4, radius=1, offsetX=0, offsetY=-0.6, elev=0.0, azispan=0.0, elespan=0.0, count=1, speed=4)

::circle(src=4, iniT=1/4, targeT=3/4, radius=1, offsetX=0, offsetY=-0.4, elev=0.0, azispan=0.0, elespan=0.0, count=1, speed=4)

4

@init_TSL($RT_TEMPO)
::src_clearAll(4)
print_antescofo "Trajectory Done !"

event 1 arcs_04

@multiplayer(4, 0.3)

::circle(src=1, iniT=3/4, targeT=1/4, radius=1, offsetX=0, offsetY=-1, elev=0.0, azispan=0.0, elespan=0.0, count=1, speed=4)

::circle(src=2, iniT=3/4, targeT=1/4, radius=1, offsetX=0, offsetY=-0.8, elev=0.0, azispan=0.0, elespan=0.0, count=1, speed=4)

::circle(src=3, iniT=-3/4, targeT=2+1/4, radius=1, offsetX=0, offsetY=-0.6, elev=0.0, azispan=0.0, elespan=0.0, count=1, speed=4)

::circle(src=4, iniT=-3/4, targeT=2+1/4, radius=1, offsetX=0, offsetY=-0.4, elev=0.0, azispan=0.0, elespan=0.0, count=1, speed=4)

4

@init_TSL($RT_TEMPO)
::src_clearAll(4)
print_antescofo "Trajectory Done !"

event 1 arcs_05

;cf figure II for positions according to offset and arc shapes according to X value in radian

@multiplayer(4, 0.7)

group source3 @tempo := $RT_TEMPO*2 {


  print_antescofo $RT_TEMPO

::circle(src=2, iniT=0, targeT=1/2, radius=0.2, offsetX=0.1, offsetY=0.1, elev=0.0, azispan=0.0, elespan=0.0, count=1, speed=4) ; positive x and y offset
4
::circle(src=2, iniT=1/2, targeT=0, radius=0.4, offsetX=0.1, offsetY=0.1, elev=0.0, azispan=0.0, elespan=0.0, count=1, speed=4) ; return ticket
4
::circle(src=2, iniT=0, targeT=1/2, radius=0.6, offsetX=0.1, offsetY=0.1, elev=0.0, azispan=0.0, elespan=0.0, count=1, speed=4) ; expanding radius
4
::circle(src=2, iniT=1/2, targeT=0, radius=0.8, offsetX=0.1, offsetY=0.1, elev=0.0, azispan=0.0, elespan=0.0, count=1, speed=4) ; ; arc shape cf. figure II 0 < x < π/2
4
::circle(src=2, iniT=0, targeT=1/2, radius=1, offsetX=0.1, offsetY=0.1, elev=0.0, azispan=0.0, elespan=0.0, count=1, speed=4)
}

group source1 @tempo := $RT_TEMPO*0.5 {


::circle(src=4, iniT=1,   targeT=3/2,  radius=0.2,  offsetX=-0.1, offsetY=-0.1, elev=0.0, azispan=0.0, elespan=0.0,  count=1, speed=4) ; negative x and y offset
4
::circle(src=4, iniT=3/2, targeT=1,    radius=0.4,  offsetX=-0.1, offsetY=-0.1, elev=0.0, azispan=0.0, elespan=0.0,  count=1, speed=4) ; return ticket
4
::circle(src=4, iniT=1,   targeT=3/2,  radius=0.6,  offsetX=-0.1, offsetY=-0.1, elev=0.0, azispan=0.0, elespan=0.0,  count=1, speed=4) ; expanding radius
4
::circle(src=4, iniT=3/2, targeT=1,    radius=0.8,  offsetX=-0.1, offsetY=-0.1, elev=0.0, azispan=0.0, elespan=0.0,  count=1, speed=4) ; arc shape cf. figure II π < x < 3π/2
4
::circle(src=4, iniT=1,   targeT=3/2,  radius=1,    offsetX=-0.1, offsetY=-0.1, elev=0.0, azispan=0.0, elespan=0.0,  count=1, speed=4)

}

20

@init_TSL($RT_TEMPO)
::src_clearAll(4)
print_antescofo "Trajectory Done !"

event 1 figure_II

@multiplayer(4, 0.3)

::circle(src=1, iniT=1/2, targeT=1,   radius=1,  offsetX=-0.,  offsetY=0., elev=0.0, azispan=0.0, elespan=0.0,  count=1, speed=4)

::circle(src=2, iniT=0,   targeT=1/2, radius=1,  offsetX=0.,  offsetY=0., elev=0.0, azispan=0.0, elespan=0.0,  count=1, speed=4)

::circle(src=3, iniT=1,   targeT=3/2, radius=1,  offsetX=-0., offsetY=0., elev=0.0, azispan=0.0, elespan=0.0,  count=1, speed=4)

::circle(src=4, iniT=3/2, targeT=2,   radius=1,   offsetX=0., offsetY=0., elev=0.0, azispan=0.0, elespan=0.0,  count=1, speed=4)

4

@init_TSL($RT_TEMPO)
::src_clearAll(4)
print_antescofo "Trajectory Done !"

2
label "End of the score !"
print_antescofo "End of the score, why don't you check other scripts !"
